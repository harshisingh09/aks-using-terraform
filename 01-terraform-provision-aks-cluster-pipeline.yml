trigger:
- master

pool:
  vmImage: 'ubuntu-latest'

# Define Variables for Environments
variables:
- name: DEV_ENVIRONMENT
  value: dev
#- name: QA_ENVIRONMENT
 # value: qa  

stages:
- stage: TerraformValidate
  jobs:
    - job: TerraformValidateJob
      continueOnError: false
      steps:
      - task: PublishPipelineArtifact@1
        displayName: Publish Artifacts
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          artifact: 'terraform-manifests-out'
          publishLocation: 'pipeline'
      - task: TerraformInstall@0
        displayName: Terraform Install
        inputs:
          terraformVersion: 'latest'
      - task: TerraformCLI@0
        displayName: Terraform Init
        inputs:
          command: 'init'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          backendType: 'azurerm'
          backendServiceArm: 'aks-azurerm-svc-con'
          backendAzureRmResourceGroupName: 'terraform-storage-rg'
          backendAzureRmStorageAccountName: 'state-storage-account'
          backendAzureRmContainerName: 'tfstatefiles'
          backendAzureRmKey: 'aks-base.tfstate'
          allowTelemetryCollection: false
      - task: TerraformCLI@0
        displayName: Terraform Validate
        inputs:
          command: 'validate'
          workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'
          allowTelemetryCollection: false

# Stage-2: Deploy Stages for Dev

- stage: DeployAKSClusters
  jobs:
    - deployment: DeployDevAKSCluster
      displayName: DeployDevAKSCluster
      pool:
        vmImage: 'ubuntu-latest'
      environment: dev #$(DEV_ENVIRONMENT)      
      strategy:
        runOnce:
          deploy:
            steps:            
            - task: TerraformCLI@0
              displayName: Terraform Init
              inputs:
                command: 'init'
                workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                backendType: 'azurerm'
                backendServiceArm: 'aks-azurerm-svc-con'
                backendAzureRmResourceGroupName: 'terraform-storage-rg'
                backendAzureRmStorageAccountName: 'state-storage-account'
                backendAzureRmContainerName: 'tfstatefiles'
                backendAzureRmKey:  'dev.tfstate' #'$(DEV_ENVIRONMENT).tfstate'
                allowTelemetryCollection: false
     

            - task: TerraformCLI@0
              displayName: Terraform Plan
              inputs:
               command: 'plan'
               workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
               environmentServiceName: 'aks-azurerm-svc-con'
               commandOptions: '-out $(Pipeline.Workspace)/terraform-manifests-out/dev-$(Build.BuildId).out'
               allowTelemetryCollection: false
                       

            - task: TerraformCLI@0
              displayName: Terraform Apply
              inputs:
                command: 'apply'
                workingDirectory: '$(Pipeline.Workspace)/terraform-manifests-out'
                environmentServiceName: 'aks-azurerm-svc-con'
                commandOptions: '$(Pipeline.Workspace)/terraform-manifests-out/$(environment)-$(Build.BuildId).out'
                allowTelemetryCollection: false